{"version":3,"file":"static/js/cast-page.df3d49cc.chunk.js","mappings":"kLACA,EAA0B,8BAA1B,EAA8D,0BAA9D,EAA+F,2B,SCmB/F,EAhBqB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACtB,OACE,iBAAKC,KAAK,QAAQC,UAAWC,EAA7B,WACE,gBAAKC,IAAKC,EAAUC,MAAM,MAAMC,IAAI,YAAYL,UAAWC,KAE3D,cAAGK,KAAMR,EAASE,UAAWC,EAA7B,SACGH,S,0ECTT,EAAyB,uB,SCUzB,EARe,WACb,OACE,gBAAKE,UAAWC,EAAhB,UACE,SAAC,IAAD,CAAYM,KAAM,IAAKC,MAAM,4B,oLCN7BC,EAAU,+BACVC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAyBC,EAAzB,+BAA+B,GAAIC,EAAnC,+BAA4C,GAA5C,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OACN,IAAIC,MAAM,yEALlB,2GASO,SAASC,IACd,OAAOV,EAAU,GAAD,OAAIF,EAAJ,uCAA0CC,IAGrD,SAASY,EAAkBC,GAChC,OAAOZ,EAAU,GAAD,OACXF,EADW,iCACqBC,EADrB,kBACsCa,EADtC,+CAKX,SAASC,EAAkBC,GAChC,OAAOd,EAAU,GAAD,OACXF,EADW,kBACMgB,EADN,oBACyBf,EADzB,oBAKX,SAASgB,EAAkBD,GAChC,OAAOd,EAAU,GAAD,OACXF,EADW,kBACMgB,EADN,4BACiCf,EADjC,oBAKX,SAASiB,EAAkBF,GAChC,OAAOd,EAAU,GAAD,OACXF,EADW,kBACMgB,EADN,4BACiCf,EADjC,6B,6IClClB,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA4E,oBAA5E,EAAuG,mBAAvG,EAAsI,wB,SCyEtI,EA9Da,WACX,IAAQe,GAAYG,EAAAA,EAAAA,MAAZH,QAER,GAAwBI,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,QAArC,eAAOK,EAAP,KAAeC,EAAf,KA0BA,OAxBAC,EAAAA,EAAAA,YAAU,WACRD,EAAU,WAEVxB,EAAAA,GACqBc,GAClBY,MAAK,YAAe,IAAZP,EAAW,EAAXA,KACP,GAAoB,IAAhBA,EAAKQ,OAOP,OANAC,EAAAA,OAAAA,QAAe,oDAA2C,CACxDC,SAAU,YACVpC,MAAO,QACPqC,SAAU,cAEZN,EAAU,QAGZJ,EAAQD,GACRK,EAAU,eAEXO,OAAM,SAAAV,GACLC,EAAS,qBACTE,EAAU,iBAEb,CAACV,KAGF,gCACc,YAAXS,IAAwB,SAACS,EAAA,EAAD,IAEb,aAAXT,IAAyB,SAACU,EAAA,EAAD,CAAc9C,QAASkC,IAErC,aAAXE,IACC,eAAIlC,UAAWC,EAAf,SACG6B,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,UAApC,OACR,gBAAIjD,UAAWC,EAAf,WACE,gBACEC,IACE6C,EAAY,0CAC2BA,GACnCG,EAEN7C,IAAK2C,EACLhD,UAAWC,KAGb,eAAID,UAAWC,EAAf,SAAwB+C,KAExB,cAAGhD,UAAWC,EAAd,SAA4BgD,MAbFH,a","sources":["webpack://goit-react-hw-05--movies/./src/components/ErrorMessage/ErrorMessage.module.css?d773","components/ErrorMessage/ErrorMessage.jsx","webpack://goit-react-hw-05--movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","services/apiMovies.jsx","webpack://goit-react-hw-05--movies/./src/views/Cast/Cast.module.css?f355","views/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ErrorMessage_content__yYcYy\",\"img\":\"ErrorMessage_img__ftSmX\",\"text\":\"ErrorMessage_text__wxNos\"};","import PropTypes from 'prop-types';\nimport errorImg from '../../images/error-image.jpg';\nimport s from './ErrorMessage.module.css';\n\nconst ErrorMessage = ({ message }) => {\n  return (\n    <div role=\"alert\" className={s.content}>\n      <img src={errorImg} width=\"600\" alt=\"not found\" className={s.img} />\n\n      <p text={message} className={s.text}>\n        {message}\n      </p>\n    </div>\n  );\n};\n\nErrorMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default ErrorMessage;\n","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__+lRPl\"};","import RingLoader from 'react-spinners/RingLoader';\nimport s from './Loader.module.css';\n\nconst Loader = () => {\n  return (\n    <div className={s.loader}>\n      <RingLoader size={100} color=\"var(--accent-color)\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","const API_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '8291bfa5fdbbfe1b8899750e95db67c5';\n\nasync function apiMovies(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(\n        new Error('404 Not Found ðŸ˜” The resource requested could not be found')\n      );\n}\n\nexport function fetchTrending() {\n  return apiMovies(`${API_URL}/trending/movie/day?api_key=${API_KEY}`);\n}\n\nexport function fetchSearchMovies(query) {\n  return apiMovies(\n    `${API_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n}\n\nexport function fetchMovieDetails(movieId) {\n  return apiMovies(\n    `${API_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieCredits(movieId) {\n  return apiMovies(\n    `${API_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(movieId) {\n  return apiMovies(\n    `${API_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__aEIzV\",\"item\":\"Cast_item__4WrzW\",\"photo\":\"Cast_photo__jTQ9F\",\"name\":\"Cast_name__1PqOC\",\"character\":\"Cast_character__8TC1h\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Notify } from 'notiflix';\n\nimport * as apiMovies from '../../services/apiMovies';\n\nimport Loader from 'components/Loader';\nimport ErrorMessage from 'components/ErrorMessage';\nimport noFoundImage from '../../images/no-image.jpg';\n\nimport s from './Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState(null);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    setStatus('pending');\n\n    apiMovies\n      .fetchMovieCredits(movieId)\n      .then(({ cast }) => {\n        if (cast.length === 0) {\n          Notify.failure('WE DONT HAVE ANY CAST FOR THIS MOVIESðŸ˜•', {\n            position: 'right-top',\n            width: '500px',\n            fontSize: '20px',\n          });\n          setStatus('idle');\n          return;\n        }\n        setCast(cast);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setError('PLEASE, TRY AGAIN');\n        setStatus('rejected');\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n\n      {status === 'rejected' && <ErrorMessage message={error} />}\n\n      {status === 'resolved' && (\n        <ul className={s.list}>\n          {cast.map(({ id, profile_path, original_name, character }) => (\n            <li className={s.item} key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : noFoundImage\n                }\n                alt={original_name}\n                className={s.photo}\n              />\n\n              <h3 className={s.name}>{original_name}</h3>\n\n              <p className={s.character}>{character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["message","role","className","s","src","errorImg","width","alt","text","size","color","API_URL","API_KEY","apiMovies","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrending","fetchSearchMovies","query","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","useParams","useState","cast","setCast","error","setError","status","setStatus","useEffect","then","length","Notify","position","fontSize","catch","Loader","ErrorMessage","map","id","profile_path","original_name","character","noFoundImage"],"sourceRoot":""}
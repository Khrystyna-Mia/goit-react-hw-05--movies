{"version":3,"file":"static/js/movies-page.cd65dfdd.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05--movies/./src/components/ErrorMessage/ErrorMessage.module.css?d773","components/ErrorMessage/ErrorMessage.jsx","webpack://goit-react-hw-05--movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","services/apiMovies.jsx","webpack://goit-react-hw-05--movies/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","webpack://goit-react-hw-05--movies/./src/views/MoviesPage/MoviesPage.module.css?0f72","views/MoviesPage/MoviesPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ErrorMessage_content__yYcYy\",\"img\":\"ErrorMessage_img__ftSmX\",\"text\":\"ErrorMessage_text__wxNos\"};","import PropTypes from 'prop-types';\nimport errorImg from '../../images/error-image.jpg';\nimport s from './ErrorMessage.module.css';\n\nconst ErrorMessage = ({ message }) => {\n  return (\n    <div role=\"alert\" className={s.content}>\n      <img src={errorImg} width=\"600\" alt=\"not found\" className={s.img} />\n\n      <p text={message} className={s.text}>\n        {message}\n      </p>\n    </div>\n  );\n};\n\nErrorMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default ErrorMessage;\n","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__+lRPl\"};","import RingLoader from 'react-spinners/RingLoader';\nimport s from './Loader.module.css';\n\nconst Loader = () => {\n  return (\n    <div className={s.loader}>\n      <RingLoader size={100} color=\"var(--accent-color)\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","const API_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '8291bfa5fdbbfe1b8899750e95db67c5';\n\nasync function apiMovies(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(\n        new Error('404 Not Found ðŸ˜” The resource requested could not be found')\n      );\n}\n\nexport function fetchTrending() {\n  return apiMovies(`${API_URL}/trending/movie/day?api_key=${API_KEY}`);\n}\n\nexport function fetchSearchMovies(query) {\n  return apiMovies(\n    `${API_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n}\n\nexport function fetchMovieDetails(movieId) {\n  return apiMovies(\n    `${API_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieCredits(movieId) {\n  return apiMovies(\n    `${API_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(movieId) {\n  return apiMovies(\n    `${API_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBar\":\"SearchBar_searchBar__rjQkX\",\"form\":\"SearchBar_form__gW7Gj\",\"input\":\"SearchBar_input__bIy50\",\"button\":\"SearchBar_button__T7RTc\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FaSearch } from 'react-icons/fa';\nimport { Notify } from 'notiflix';\nimport s from './SearchBar.module.css';\n\nconst SearchBar = ({ onSubmit }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleChange = e => {\n    setInputValue(e.currentTarget.value.trim().toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (inputValue === '') {\n      Notify.info('ðŸ™„ PLEASE, ENTER THE TITLE OF THE MOVIE!', {\n        position: 'center-center',\n        width: '500px',\n        fontSize: '20px',\n      });\n    }\n\n    onSubmit(inputValue);\n    setInputValue('');\n  };\n\n  return (\n    <div className={s.searchBar}>\n      <form className={s.form} onSubmit={handleSubmit}>\n        <input\n          className={s.input}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies...\"\n          value={inputValue}\n          onChange={handleChange}\n        />\n\n        <button type=\"submit\" className={s.button}>\n          <FaSearch size={30} fill=\"var(--accent-color)\" />\n        </button>\n      </form>\n    </div>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MoviesPage_list__yYFTM\",\"item\":\"MoviesPage_item__dgvDQ\",\"link\":\"MoviesPage_link__GMVyM\",\"thumb\":\"MoviesPage_thumb__rE3Wh\",\"title\":\"MoviesPage_title__Ag9yt\"};","import { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport * as apiMovies from '../../services/apiMovies';\n\nimport SearchBar from 'components/SearchBar';\nimport Loader from 'components/Loader';\nimport ErrorMessage from 'components/ErrorMessage';\nimport noFoundImage from '../../images/no-image.jpg';\n\nimport s from './MoviesPage.module.css';\n\nconst MoviesPage = () => {\n  const location = useLocation();\n\n  const [query, setQuery] = useState(\n    new URLSearchParams(location.search).get('query') ?? ''\n  );\n  const [movies, setMovies] = useState(null);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    if (!query) return;\n    setStatus('pending');\n\n    apiMovies\n      .fetchSearchMovies(query)\n      .then(({ results }) => {\n        if (results.length === 0) {\n          setError(`NO SUCH MOVIE FOUND ${query}`);\n          setStatus('rejected');\n          return;\n        }\n\n        setMovies(results);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setError(error.message);\n        setStatus('rejected');\n      });\n  }, [query]);\n\n  const handleFormSubmit = querySearch => {\n    if (query === querySearch) return;\n    setQuery(querySearch);\n  };\n\n  return (\n    <div>\n      <SearchBar onSubmit={handleFormSubmit} />\n\n      {status === 'pending' && <Loader />}\n\n      {status === 'rejected' && <ErrorMessage message={error} />}\n\n      {status === 'resolved' && (\n        <ul className={s.list}>\n          {movies.map(({ id, title, poster_path }) => (\n            <li className={s.item} key={id}>\n              <Link\n                className={s.link}\n                to={`/movies/${id}`}\n                state={{ from: location }}\n              >\n                <div className={s.thumb}>\n                  <img\n                    src={\n                      poster_path\n                        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                        : noFoundImage\n                    }\n                    alt={title}\n                  />\n                </div>\n\n                <h2 className={s.title}>{title}</h2>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["message","role","className","s","src","errorImg","width","alt","text","size","color","API_URL","API_KEY","apiMovies","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrending","fetchSearchMovies","query","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","onSubmit","useState","inputValue","setInputValue","e","preventDefault","Notify","position","fontSize","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","trim","toLowerCase","fill","location","useLocation","URLSearchParams","search","get","setQuery","movies","setMovies","error","setError","status","setStatus","useEffect","then","results","length","catch","querySearch","Loader","ErrorMessage","map","id","title","poster_path","to","state","from","noFoundImage"],"sourceRoot":""}